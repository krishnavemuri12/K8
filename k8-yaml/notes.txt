To modify the properties of the pod, you can utilize the kubectl edit pod <pod-name> command. Please note that only the properties listed below are editable.

spec.containers[*].image

spec.initContainers[*].image

spec.activeDeadlineSeconds

spec.tolerations

spec.terminationGracePeriodSeconds

kubectl explain <resource>.<field> will provide you with details about the field in the resource. 
For example, kubectl explain pod.spec.containers will provide details about the containers field in the pod definition.

a pod which is in default namespace to connect with pod in another namespace
<service-name>.<namespace>.svc.cluster.local

cluster.local is the default cluster domain in Kubernetes. When you create a service in kubernetes
svc is the subdomain for the service
namespace is the namespace where the service is running

kubectl config set-context $(kubectl config current-context) --namespace=<namespace-name> will set the default namespace for the current context in kubectl.

# to limit resource quota in a namespace
# example
#apiVersion: v1
#kind: ResourceQuota
#metadata:
#  name: compute-resources
#  namespace: development
#spec:
#  hard:
#    pods: "10"
#    requests.cpu: "4"
#   requests.memory: "5Gi"
#    limits.cpu: "10"
#    limits.memory: "10Gi"

-----------------
Certification Tip: Imperative Commands
While you would be working mostly the declarative way - using definition files, imperative commands can help in getting one-time tasks done quickly, as well as generate a definition template easily. This would help save a considerable amount of time during your exams.

Before we begin, familiarize yourself with the two options that can come in handy while working with the below commands:

--dry-run: By default, as soon as the command is run, the resource will be created. If you simply want to test your command, use the --dry-run=client option. This will not create the resource. Instead, tell you whether the resource can be created and if your command is right.

-o yaml: This will output the resource definition in YAML format on the screen.



Use the above two in combination along with Linux output redirection to generate a resource definition file quickly, that you can then modify and create resources as required, instead of creating the files from scratch.



kubectl run nginx --image=nginx --dry-run=client -o yaml > nginx-pod.yaml



POD
Create an NGINX Pod

kubectl run nginx --image=nginx



Generate POD Manifest YAML file (-o yaml). Don't create it(--dry-run)

kubectl run nginx --image=nginx --dry-run=client -o yaml



Deployment
Create a deployment

kubectl create deployment --image=nginx nginx



Generate Deployment YAML file (-o yaml). Don't create it(--dry-run)

kubectl create deployment --image=nginx nginx --dry-run -o yaml



Generate Deployment with 4 Replicas

kubectl create deployment nginx --image=nginx --replicas=4



You can also scale deployment using the kubectl scale command.

kubectl scale deployment nginx --replicas=4



Another way to do this is to save the YAML definition to a file and modify

kubectl create deployment nginx --image=nginx--dry-run=client -o yaml > nginx-deployment.yaml



You can then update the YAML file with the replicas or any other field before creating the deployment.



Service
Create a Service named redis-service of type ClusterIP to expose pod redis on port 6379

kubectl expose pod redis --port=6379 --name redis-service --dry-run=client -o yaml

(This will automatically use the pod's labels as selectors)

Or

kubectl create service clusterip redis --tcp=6379:6379 --dry-run=client -o yaml (This will not use the pods' labels as selectors; instead it will assume selectors as app=redis. You cannot pass in selectors as an option. So it does not work well if your pod has a different label set. So generate the file and modify the selectors before creating the service)



Create a Service named nginx of type NodePort to expose pod nginx's port 80 on port 30080 on the nodes:

kubectl expose pod nginx --port=80 --name nginx-service --type=NodePort --dry-run=client -o yaml

(This will automatically use the pod's labels as selectors, but you cannot specify the node port. You have to generate a definition file and then add the node port in manually before creating the service with the pod.)

Or

kubectl create service nodeport nginx --tcp=80:80 --node-port=30080 --dry-run=client -o yaml

(This will not use the pods' labels as selectors)

Both the above commands have their own challenges. While one of it cannot accept a selector the other cannot accept a node port. I would recommend going with the `kubectl expose` command. If you need to specify a node port, generate a definition file using the same command and manually input the nodeport before creating the service.



Reference:

https://kubernetes.io/docs/reference/kubectl/conventions/

pod and service
kubectl run pod pod-name --port=80 --expose=true --image=nginx

In Docker:
-----------
ENTRYPOINT
Defines the main executable that always runs in the container.
Not overridden by docker run <args>.
CMD
Provides default arguments to ENTRYPOINT (or command).
Can be overridden by docker run <new args>.

Dockerfile - 
FROM nginx
ENTRYPOINT ["nginx"]
CMD ["-g", "daemon off;"]

output - nginx -g 'daemon off;'

Kubernetes equivalent of ENTRYPOINT and CMD:
ENTRYPOINT ---> command: (array of strings)
CMD        ---> args: (array of strings)

pod spec
spec:
  containers:
  - name: my-container
    image: nginx
    command: ["nginx"]                # ENTRYPOINT
    args: ["-g", "daemon off;"]       # CMD

If you don’t set command and args in Kubernetes, it uses the image’s ENTRYPOINT and CMD by default.
