üåê Kubernetes Services 
======================

üîπ What is a Kubernetes Service?
--------------------------------
A **Service** in Kubernetes is an abstraction that defines a logical set of **Pods**
and a policy by which to access them. Services enable communication between 
different components in your application (e.g., frontend, backend, and database).

üìò Why Services are Needed?
---------------------------
- Pods are **ephemeral** ‚Äì they can be created or destroyed at any time.
- Each Pod gets a **new IP** when restarted.
- Services provide a **stable network identity** to access dynamic sets of Pods.

üö¶ Types of Services in Kubernetes
==================================

1Ô∏è‚É£ ClusterIP (default)
-----------------------
- Exposes the service on a **cluster-internal IP**.
- **Accessible only within the cluster.**
- Ideal for **internal communications** (e.g., frontend ‚Üî backend).

‚úÖ Example YAML:
----------------
apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  type: ClusterIP
  selector:
    app: my-app
  ports:
    - port: 80
      targetPort: 8080

2Ô∏è‚É£ NodePort
------------
- Exposes the service on each Node‚Äôs IP at a static port (**30000‚Äì32767**).
- Accessed externally using `NodeIP:NodePort`.
- Useful for **basic external access**.

apiVersion: v1
kind: Service
metadata:
  name: nginx-nodeport-service
spec:
  type: NodePort                      # This exposes service externally
  selector:
    app: nginx                        # Targets Pods with this label
  ports:
    - port: 80                        # Port exposed by the Service
      targetPort: 80                  # Container port
      nodePort: 30036                 # Static port on the Node (30000‚Äì32767)

üí° Key Points:
--------------
- Limited port range.
- Less flexible than LoadBalancer.

3Ô∏è‚É£ LoadBalancer
----------------
- Exposes the service externally using a **cloud provider‚Äôs load balancer**.
- Works in **cloud environments** (e.g., GKE, EKS, AKS).
- Creates a **public IP** and routes traffic to NodePorts.

üìù Note: Internally uses **ClusterIP + NodePort**.

4Ô∏è‚É£ ExternalName
----------------
- Maps a service to an **external DNS name**.
- Does **not create a proxy**; just a **DNS alias**.

‚úÖ Example:
-----------
apiVersion: v1
kind: Service
metadata:
  name: external-service
spec:
  type: ExternalName
  externalName: example.com

5Ô∏è‚É£ Headless Service
--------------------
- Created by setting `clusterIP: None`.
- Does **not use kube-proxy**.
- Returns **individual Pod IPs** for direct access.
- Commonly used for **stateful applications** like databases.

üß∞ Use Case: StatefulSets, DNS-based service discovery.

üß† Notes to Remember
====================

| Concept        | Summary                                      |
|----------------|----------------------------------------------|
| Service Selector | Matches labels on Pods to route traffic    |
| TargetPort     | Port on the Pod container                    |
| Port           | Port exposed by the Service                  |
| NodePort       | Static port on the Node (30000‚Äì32767)        |
| ClusterIP      | For internal communication only              |
| LoadBalancer   | External access via cloud LB                 |
| ExternalName   | DNS redirection to an external domain        |
| Headless       | Direct access to individual Pod IPs          |
| Endpoints      | Actual Pod IPs selected by the Service       |
| kube-proxy     | Handles routing to Pods behind Services      |



Kubernetes Services ‚Äì kubectl Commands
======================================

üìñ View Services
----------------
# List all services in the current namespace
kubectl get svc

# List all services across all namespaces
kubectl get svc --all-namespaces

# Get detailed info about a specific service
kubectl describe svc <service-name>

# View which Pods are linked to the service
kubectl get endpoints <service-name>


üöÄ Create Services
------------------
# Expose a Pod as a ClusterIP service
kubectl expose pod <pod-name> --port=80 --target-port=8080 --name=my-service

# Expose a Deployment as a ClusterIP service
kubectl expose deployment <deployment-name> --port=80 --target-port=8080 --name=my-service

# Expose a Deployment as a NodePort service
kubectl expose deployment <deployment-name> --type=NodePort --port=80 --target-port=8080

# Expose a Deployment as a LoadBalancer service (cloud only)
kubectl expose deployment <deployment-name> --type=LoadBalancer --port=80 --target-port=8080


üõ† Modify Services
------------------
# Edit a service configuration manually
kubectl edit svc <service-name>

# Patch a service (e.g., change service type to NodePort)
kubectl patch svc <service-name> -p '{"spec": {"type": "NodePort"}}'


üìÑ View and Export YAML
-----------------------
# Get YAML of a service
kubectl get svc <service-name> -o yaml

# Save service YAML to a file
kubectl get svc <service-name> -o yaml > my-service.yaml


üóë Delete Services
------------------
# Delete a service
kubectl delete svc <service-name>


üîç Test & Debug Services
------------------------
# DNS lookup for a service from within a Pod
kubectl exec -it <pod-name> -- nslookup <service-name>

# Curl a service endpoint from a Pod
kubectl exec -it <pod-name> -- curl http://<service-name>:<port>




