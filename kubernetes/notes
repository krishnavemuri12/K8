Scheduler:

In pod definition yaml file, every pod has field name called "nodeName". By default it is not set.
Scheduler goes through all the pods and looks for those that do not have this property set.
with nodeName you can manually assign pods to nodes.

in pod.yaml file nodeName will be under spec:
Example:
---
apiVersion: v1
kind: Pod
metadata:
  name: nginx
spec:
  nodeName: node01
  containers:
  -  image: nginx
     name: nginx
---

Scheduler runs as a pod in in the kube-system

===============================================================================================================

Labels and Selectors:
in pod definition yaml file labels should be created under metadata

apiVersion: v1
kind: Pod
metadata:
  name: nginx
  labels:
    app: App1
    function: nginx-label
spec:
  nodeName: node01
  containers:
  -  image: nginx
     name: nginx

to select the pod with labels using kubectl
kubectl get pods --selector app=App1

not only pods, Labels and selectors can be specified for all objects

In replicaset yaml labels under the metadata are labels of the replicaset itself
inorder to connect replicaset to the pods we connfigure the selector field under the replica set configuration to match the labels defined on the pod

apiVersion: apps/v1
kind: ReplicaSet
metadata:
   name: replicaset-1
   labels:
    app: App1
    function: nginx-label
spec:
   replicas: 2
   selector:   
      matchLabels:
        tier: front-end       ###labels in selector and templates should match 
   template:
     metadata:
       labels:
        tier: nginx           ##labels in selector and templates should match, then only yaml works
     spec:
       containers:
       - name: nginx
         image: nginx

=============================================================================================================================================

Taints and Tolerations:
=======================

pod-to-node relationship

Taints are set on nodes, tolerations are set on pods

if taint is set on node, Scheduler places only the tolerant pod to that node which is tolerant to that pod.


Taints and tolerations are only meant to restrict nodes from accepting certain pods.
if your requirement is to restrict a pod to certain nodes, it is achieved through another concept called as node affinity

Scheduler doesnt place ay pods in the master it is due to a ntaint is set on the master node automatically that prevents pods from being scheduled on this node.
to check
kubectl describe node kubemaster | grep Taint

kubectl taint nodes node1 key1=value1:NoSchedule


apiVersion: v1
kind: Pod
metadata:
  name: bee
spec:
  containers:
  - image: nginx
    name: bee
  tolerations:
  - key: spray
    value: mortein
    effect: NoSchedule
    operator: Equal

kubctl taint --help

kubectl get nodes -o json | jq '.items[].spec.taints'
will produce the list of the taints per each node

#to untaint
kubectl taint nodes controlplane node-role.kubernetes.io/control-plane:NoSchedule-
